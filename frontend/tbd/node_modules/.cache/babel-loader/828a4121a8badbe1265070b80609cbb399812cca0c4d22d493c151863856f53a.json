{"ast":null,"code":"var _jsxFileName = \"/Users/mercy/Desktop/IEEE/raiso-ieee-2025/frontend/tbd/src/components/Posts.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Posts() {\n  _s();\n  const [posts, setPosts] = useState([]); //posts is initialized as an empty array and setPosts is a function that will be used to update the state of posts.\n  useEffect(() => {\n    fetch('http://localhost:5000/api/posts').then(response => response.json()) //convert response to json\n    .then(data => setPosts(data)) //set the state of posts to the data that was fetched\n    .catch(err => console.error('Error fetching posts:', err)); //catch any errors that occur during the fetch\n  }, []); //empty array means that this effect will only run once after the component is mounted\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-5 ms-5 me-5\",\n    children: [posts.length === 0, \"? (\", /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No posts available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }, this), \")\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 9\n  }, this);\n}\n_s(Posts, \"bG8V4duoIfO0BEPgauWMVT5Qvyw=\");\n_c = Posts;\n;\nexport default Posts;\nvar _c;\n$RefreshReg$(_c, \"Posts\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Posts","_s","posts","setPosts","fetch","then","response","json","data","catch","err","console","error","className","children","length","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mercy/Desktop/IEEE/raiso-ieee-2025/frontend/tbd/src/components/Posts.js"],"sourcesContent":["import React, {useEffect, useState } from 'react';\n\nfunction Posts() {\n\n    const [posts, setPosts] = useState([]);//posts is initialized as an empty array and setPosts is a function that will be used to update the state of posts.\n    useEffect(() => {\n        fetch('http://localhost:5000/api/posts')\n        .then(response => response.json())//convert response to json\n        .then(data => setPosts(data))//set the state of posts to the data that was fetched\n        .catch((err) => console.error('Error fetching posts:', err));//catch any errors that occur during the fetch\n    }, []);//empty array means that this effect will only run once after the component is mounted\n\n    return (\n        <div className='container mt-5 ms-5 me-5'>\n            \n            {posts.length === 0 }? (\n        <p>No posts available.</p>)\n            \n        </div>\n    );\n};\n\nexport default Posts;"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,SAASC,KAAKA,CAAA,EAAG;EAAAC,EAAA;EAEb,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC,CAAC;EACvCD,SAAS,CAAC,MAAM;IACZQ,KAAK,CAAC,iCAAiC,CAAC,CACvCC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC;IAAA,CACjCF,IAAI,CAACG,IAAI,IAAIL,QAAQ,CAACK,IAAI,CAAC,CAAC;IAAA,CAC5BC,KAAK,CAAEC,GAAG,IAAKC,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEF,GAAG,CAAC,CAAC,CAAC;EACjE,CAAC,EAAE,EAAE,CAAC,CAAC;;EAEP,oBACIX,OAAA;IAAKc,SAAS,EAAC,0BAA0B;IAAAC,QAAA,GAEpCZ,KAAK,CAACa,MAAM,KAAK,CAAC,EAAE,KACzB,eAAAhB,OAAA;MAAAe,QAAA,EAAG;IAAmB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,KAE1B;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AAEd;AAAClB,EAAA,CAlBQD,KAAK;AAAAoB,EAAA,GAALpB,KAAK;AAkBb;AAED,eAAeA,KAAK;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}